# Created 01/02/2024
# Updated 07/02/2024 - the functions had several mistakes which I corrected thanks to Blaise Mariner. I also added a two-step version of getting_regions_and_coverage because this function fails when objects are too heavy even with parallelization.
# Updated 13/02/2024 - 1# I corrected the function tissue_specific_methylation which was not correctly subsetting to the samples for each tissue. 2# I added the two-step versions of the function getting_regions_and_coverage which are getting_regions and getting_regions_coverage.

# FUNCTION to extract regions, their coverage, count methylation, and %methylation
getting_regions_and_coverage <- function(cayo_meth,
                                         gap_region,
                                         min_cpg_region,
                                         at_least_X_coverage_of_a_region,
                                         in_at_least_X_samples){
  # define regions with Comethyl
  regions_oi <- getRegions(cayo_meth, maxGap = gap_region, n = min_cpg_region,
                           save = FALSE, verbose = FALSE)
  # name regions
  regions_oi$region_name <- paste(regions_oi$chr, regions_oi$start,
                                  regions_oi$end, sep = "_")
  
  # when run in parallel, the automatically generated "Region_ID" are no longer unique because each chr restarts at Region_1, so I replace the Region_ID with the unique region_name
  regions_oi$RegionID <- paste0("Region_",regions_oi$region_name)
  
  coverage_regions_oi <- bsseq::getCoverage(cayo_meth, type = "Cov", regions = regions_oi,
                                            what="perRegionTotal", withDimnames = TRUE)
  
  rownames(coverage_regions_oi) <- regions_oi$RegionID
  
  coverage_regions_oi <- coverage_regions_oi[rowSums(coverage_regions_oi >= at_least_X_coverage_of_a_region) >= in_at_least_X_samples, ]
  
  methylation_regions_oi <- bsseq::getCoverage(cayo_meth, type = "M", regions = regions_oi,
                                               what="perRegionTotal", withDimnames = TRUE)
  
  rownames(methylation_regions_oi) <- regions_oi$RegionID
  
  methylation_regions_oi <- methylation_regions_oi[rownames(methylation_regions_oi) %in% rownames(coverage_regions_oi),]
  
  regions_oi <- regions_oi[regions_oi$RegionID %in% rownames(methylation_regions_oi),]
  
  perc_meth <- methylation_regions_oi / coverage_regions_oi
  
  return_ <- list(regions_oi, coverage_regions_oi, methylation_regions_oi, perc_meth)
  names(return_)=c("regions", "coverage", "methylation", "pmeth")
  
  return(return_)
}

# FUNCTION to extract regions, their coverage, count methylation, and %methylation #### Should be used with getting_regions_coverage
getting_regions <- function(cayo_meth,
                            gap_region,
                            min_cpg_region){
  # # define regions with Comethyl
  # regions_oi <- getRegions(cayo_meth, maxGap = gap_region, n = min_cpg_region,
  #                          save = FALSE, verbose = FALSE)
  
  # define regions with regionFinder3
  regions_oi <- bsseq:::regionFinder3(x = as.integer(rep(1,length(cayo_meth))),
                                      chr = as.character(GenomeInfoDb::seqnames(cayo_meth)),
                                      positions = BiocGenerics::start(cayo_meth), maxGap = gap_region, verbose = FALSE)[["up"]]
  
  regions_oi <- regions_oi[regions_oi$n >= min_cpg_region,]
  
  # name regions
  regions_oi$region_name <- paste(regions_oi$chr, regions_oi$start,
                                  regions_oi$end, sep = "_")
  
  # when run in parallel, the automatically generated "Region_ID" are no longer unique because each chr restarts at Region_1, so I replace the Region_ID with the unique region_name
  regions_oi$RegionID <- paste0("Region_",regions_oi$region_name)
  return(regions_oi)
}

# FUNCTION splits the regions in smaller batches and writes out coverage, methylation count, and percent methylation for each batch. #### Should be used with getting_regions
getting_regions_coverage <- function(cayo_meth,
                                     regions,
                                     at_least_X_coverage_of_a_region,
                                     in_at_least_X_samples){
  
  # cut the region list into 5 batches
  batch_list <- split(regions, cut(seq(nrow(regions)), breaks = 5, labels = FALSE))
  
  # get coverage and save each batch
  for(i in seq_along(batch_list)){
    
    regions_oi <- batch_list[[i]]
    
    coverage_regions_oi <- bsseq::getCoverage(cayo_meth, type = "Cov", regions = regions_oi,
                                              what="perRegionTotal", withDimnames = TRUE)
    
    rownames(coverage_regions_oi) <- regions_oi$RegionID
    
    coverage_regions_oi <- coverage_regions_oi[rowSums(coverage_regions_oi >= at_least_X_coverage_of_a_region) >= in_at_least_X_samples, ]
    
    methylation_regions_oi <- bsseq::getCoverage(cayo_meth, type = "M", regions = regions_oi,
                                                 what="perRegionTotal", withDimnames = TRUE)
    
    rownames(methylation_regions_oi) <- regions_oi$RegionID
    
    methylation_regions_oi <- methylation_regions_oi[rownames(methylation_regions_oi) %in% rownames(coverage_regions_oi),]
    
    regions_oi <- regions_oi[regions_oi$RegionID %in% rownames(methylation_regions_oi),]
    
    perc_meth <- methylation_regions_oi / coverage_regions_oi
    
    return_ <- list(regions_oi, coverage_regions_oi, methylation_regions_oi, perc_meth)
    names(return_)=c("regions", "coverage", "methylation", "pmeth")
    
    write_rds(return_,file = paste0("/scratch/sbaptis7/Cayotissue_CpG_coverage/regions_batches/",gap_region,"/regions_batch_chr",unique(regions_oi$chr),"_batch",i,".rds"))
    
    # clean workspace for memory
    rm(regions_oi,coverage_regions_oi,methylation_regions_oi,perc_meth,return_)
  }
}

# FUNCTION to obtain tissue-specific methylation data on regions
tissue_specific_methylation <- function(matrix_list, tissue, metadata_sample, hypomethylated, hypermethylated, variance_meth) {
  
  # Extract 'lid_pid' values for the current tissue level
  tissue_lids <- metadata_sample$lid_pid[metadata_sample$grantparent_tissueType %in% tissue]

  # Filter pmeth matrix based on tissue_lids
  subset_pmeth <- matrix_list$pmeth[, colnames(matrix_list$pmeth) %in% tissue_lids]
  
  # Remove hypo and hypermethylated regions for that tissue
  subset_pmeth <- subset_pmeth[rowMeans(subset_pmeth, na.rm = TRUE) >= hypomethylated & 
                                 rowMeans(subset_pmeth, na.rm = TRUE) <= hypermethylated, ]
  
  # Remove regions with low percent methylation variance
  subset_pmeth <- subset_pmeth[rowSds(subset_pmeth, na.rm = TRUE, useNames = TRUE) >= variance_meth, , drop = FALSE]
  
  # Get row names and column names after filtering pmeth
  rows_pmeth <- rownames(subset_pmeth)
  cols_pmeth <- colnames(subset_pmeth)
  
  # Filter coverage and methylation matrices based on pmeth
  subset_result <- lapply(matrix_list[c("coverage", "methylation")], function(df) {
    df[rows_pmeth, cols_pmeth, drop = FALSE]
  })
  
  # Now subset the regions based on pmeth row names
  regions <- matrix_list$regions[matrix_list$regions$RegionID %in% rows_pmeth, ]
  
  # Return the filtered data
  return(list(coverage = subset_result$coverage, 
              methylation = subset_result$methylation, 
              pmeth = subset_pmeth, 
              regions = regions))
}

# N.B although the function tissue_specific_methylation creates separate objects for each entries in a list of tissues, a pan-tissue matrix can easily be obtained by applying the function with tissue = c(tissue_oi).
